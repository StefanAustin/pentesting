Buffer Overflow

(cheat sheet for me, maybe not detailed enough to use as guide for others)

The buffer overflow part is one of the most tough parts of the course. It is not because it is difficult; it is more because it is so complicated explained. The target machine is a Win XP and you should have running a XP VM as well. This is getting harder and harder to get. Alternative Win 7 without Defender, Firewall (no protection).

For the PTP exam dimitrios recommended a Win 7 x64

If you use a patched Win 10, you have to switch off a lot of security features (developing options, real-time defender) but can not switch off all things.

Buffer overflow has this steps:
0. Find the program

1. Spiking 

2. Fuzzing 

3. Finding Offset

4. Overwriting EIP

5. Find bad characters

6. Find the right module

7. Generate Shellcode for root

8. Test it

9. Send it
-------------------

0. Find, download and test the target program
Usually it is a program that can talk to you and you have access to it. Look for weird open ports as well, you maybe can connect to it.

in a FTP folder
prompt OFF
binary → for performance and it is more stable
mget *
bye

ftp <IP>
>anonymous
>anonymous
>ls -a                   # List all files (even hidden) (yes, they could be hidden)
>binary                #Set transmission to binary instead of ascii, important and recommended 
>ascii                  #Set transmission to ascii instead of binary
>mget *
>bye                   #exit

SMB, NFS, webshares are other options

Test the stolen program in your VM, run as admin.

Use your kali and connect to the stolen program via nc <weird open port>

1. Spiking
Sending random input and try to crash it. Usually you send all possible values to the target. It will take a while.

Use the e.g. the program “generic_send_tcp” for a real situation. ELS used a bunch of As

You can use “python c ‘print “A” *5000” to create the As or use a code like A*5000.

The target crashes, the target is vulnerable.

2. Fuzzing
You know now that the target is vulnerable, check if you can control the EIP

→ send “A”s to the target, the EIP should be 414141

3. Finding offset / EIP
Start Immunity Debugger (as admin if you can) and attach or load the target program.

Commands:

pattern_create.rb -l 5000 or msf-pattern_create -l 5000 or !mona pc 5000

You can use mona or create_pattern to create specific payload with a unique string.
You send this payload to your target. Immunity Debugger will stop and you see the EIP pattern.

Use mona or pattern_find to find the correct offset.

Commands:

msf-pattern_offset -l 5000 -q <number you found for EIP>

You will get a number and you know the offset. Mona works as well, but the red string is not an error it is the number that we are looking for.

4. Overwriting EIP
Test the right offset:

Send e.g. 989 As and 4 Bs. If you see 424242 in your EIP, you control the EIP.

5. Finding bad characters
You should know that \x00 is a bad character and you can not use it in your payload. Win XP has most likely two more bad characters, you have to find them. If step 3 was successful, you can add chars between \x01 and \xff and send it.

Immunity Debugger will stop again. Right Click on ESP(?) and use follow dump. If you did everything right, you see the pattern in the dump area. The numbers will go up: 01, 02, 03, 04… because you send this pattern, but the pattern will stop and you found a bad character. Remove this number and do this step again and again until you see x01 to xFF (without the bad chars). Now you know the bad characters, write them down. You need this information later.

6. Finding the right module
Use mona to find a module without protection. If you grab e.g. the FTP server, you can see that the server uses a dll as well. Old ddls have static JMP ESP commands, great!

Commands:

!mona modules

!mona find -s “\xff\xe4” -m <dll or program>

Find a JMP ESP, point EIP to it. Use Immunity Debugger to check if the EIP is written correctly. Attention: it is little Indian. If you get 3b563a as address you have to send 3A 56 3B as payload. A test is very important, be sure that you have the right address.

(Sometimes you get more JMP ESPs, try all if the first does not work.)

7. Generate shellcode
Add some NOPs (start with 16 or 32) after the EIP. If the payload doesn't work, play with this number.

Create a matching payload with e.g msfvenom but exclude all bad characters. Start with an easy payload e.g windows_shell and if it works you can add a meterpreter payload.
Most likey you need a bind payload (unstaged?), because the first machine is not the BoF machine. Start with a shell payload and upgrade it via shell_to_meterpreter. A shell is much smaller compared to a meterpreter payload.

8. Test it
If you are lucky, you will get a shell.
Important: in a real system, never try to send random bad stuff against the target. Test it on your VM first! The reason is obvious: You will crash the service and you maybe have exact ONE attempt. If you are lucky, the service will restart automatically, but you don't want relay on that.

8. Sent the stuff to the target
You have to change at least three things:

- payload (IP)

- nc or meterpreter listener

- program that send the stuff (IP + new payload)

If you did everything right… you will get a shell.
My primary resource is The Cyber Mentors youtube channel and his udemy courses.

Buffer Overflows Made Easy

TryHackMe - Brainstorm Walkthrough (Buffer Overflows Lets GOOO).
